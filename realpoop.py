import streamlit as st
from fastai.vision.all import *
from PIL import Image 
import pandas as pd 
import plotly.express as px
from pathlib import Path
import sys
import pathlib
import google.generativeai as genai 

#‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö Windows ‡πÅ‡∏•‡∏∞ Linux (‡∏Å‡πà‡∏≠‡∏ô deploy ‡∏à‡∏£‡∏¥‡∏á)
_original_posix_path = None
if sys.platform == "win32":
    if hasattr(pathlib, 'PosixPath') and not isinstance(pathlib.PosixPath, pathlib.WindowsPath):
        _original_posix_path = pathlib.PosixPath
        pathlib.PosixPath = pathlib.WindowsPath


#llm gemini
api_key_configured = False
GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
genai.configure(api_key=GOOGLE_API_KEY)
api_key_configured = True

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô" ---
def get_initial_explanation(stool_class):
    class_map = {
        "Blood": "‡∏°‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏õ‡∏ô (Blood)", "Diarrhea": "‡∏ó‡πâ‡∏≠‡∏á‡∏£‡πà‡∏ß‡∏á/‡∏ó‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢ (Diarrhea)",
        "Green": "‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (Green)", "Mucus": "‡∏°‡∏µ‡∏°‡∏π‡∏Å‡∏õ‡∏ô (Mucus)",
        "Normal": "‡∏õ‡∏Å‡∏ï‡∏¥ (Normal)", "Yellow": "‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á (Yellow)"
    }
    friendly_name = class_map.get(stool_class, stool_class)
    prompt = f"""
    ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "{friendly_name}" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÇ‡∏î‡∏¢‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
    1.  **‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ:**
    2.  **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:**
    3.  **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á:**
    **‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:** ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏ô‡πâ‡∏ô‡∏¢‡πâ‡∏≥‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏à‡∏≤‡∏Å‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡∏à‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ "‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ô‡∏µ‡πâ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"
    """
    try:
        model = genai.GenerativeModel('gemini-1.5-flash-latest')
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢, ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: {e}"


#model
MODEL_FILENAME = Path("convnextv2_thev1_best_for_good.pkl")
@st.cache_resource
def load_model(local_path):
    learn = load_learner(local_path)
    return learn
learn = load_model(MODEL_FILENAME)


#header
st.title("üí© :rainbow[Poop Classification & AI Chat]")
st.subheader("‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞ ‡πÅ‡∏•‡∏∞‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö‡∏Å‡∏±‡∏ö AI")
st.warning("‚ö†Ô∏è **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á:** ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å AI ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô **‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏à‡∏≤‡∏Å‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÑ‡∏î‡πâ** ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏±‡∏á‡∏ß‡∏•‡πÉ‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç")

#‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°(gemini)
def process_and_start_chat(image_source, key_suffix):
    if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢", key=key_suffix):
        with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢...'):
            pil_image = PILImage.create(image_source)
            pred_class, pred_idx, probs = learn.predict(pil_image)
            st.markdown(f"#### ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: **{pred_class}**")
            st.markdown(f"##### ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: **{probs[pred_idx]:.1%}**")
            df_probs = pd.DataFrame({'Class': learn.dls.vocab, 'Probability': probs.numpy() * 100})
            fig = px.pie(df_probs, values='Probability', names='Class', color_discrete_sequence=px.colors.qualitative.Set3)
            fig.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig, use_container_width=True)
            st.markdown("---")
            
            
            with st.spinner('AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...'):
                initial_explanation = get_initial_explanation(pred_class)
                model = genai.GenerativeModel('gemini-1.5-flash-latest')
                st.session_state.chat = model.start_chat(history=[])
                st.session_state.messages = [{"role": "model", "parts": [initial_explanation]}]

sec = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", ["‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á", "‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ(‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ)"])

#first sec
if sec == "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á":
    upload_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", type=["jpg", "jpeg", "png"])
    if upload_file:
        st.image(upload_file, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", use_container_width=True)
        process_and_start_chat(upload_file, key_suffix="upload")
#sec sec
elif sec == "‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ(‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ)":
    class_poo = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö", ["Blood", "Diarrhea", "Green", "Mucus", "Normal", "Yellow"])
    ex_img = {
        "Blood": [r"E:\MyFastAI_Project_E\Image\Blood\1.png",
                  r"E:\MyFastAI_Project_E\Image\Blood\2.jpg", 
                  r"E:\MyFastAI_Project_E\Image\Diarrhea\122879523_10222902185640115_5437019702589621427_n.jpg"],
        "Diarrhea": [r"E:\MyFastAI_Project_E\Image\Diarrhea\68621499_10158897636364968_929960603991146496_n.jpg",
                     r"E:\MyFastAI_Project_E\Image\Diarrhea\118258565_2797050553861531_5149781090231407705_n.jpg",
                     r"E:\MyFastAI_Project_E\Image\Diarrhea\362242137_646001919459_4084599573521026560_n.jpg"],
        "Green": [r"E:\MyFastAI_Project_E\Image\Green\470220113_1111404843690107_5400214401912539739_n.jpg",
                  r"E:\MyFastAI_Project_E\Image\Green\470210610_1614069995660748_7907742087399683339_n.jpg",
                  r"E:\MyFastAI_Project_E\Image\Green\363839965_10167704066005534_8500730712227200736_n.jpg"],
        "Mucus": [r"E:\MyFastAI_Project_E\Image\Mucus\does-this-look-like-it-could-be-worms-or-maybe-mucus-in-my-v0-6fvtr2ywdv4d1.png",
                  r"E:\MyFastAI_Project_E\Image\Mucus\mucus-in-stool-the-first-one-i-thought-was-a-parasite-but-v0-ocmq6pflaxib1.png",
                  r"E:\MyFastAI_Project_E\Image\Mucus\my-stormatch-intestine-make-noises-every-minute-what-should-v0-ortl442yi0ue1.png"],
        "Normal": [r"E:\MyFastAI_Project_E\Image\Normal\54.png",
                   r"E:\MyFastAI_Project_E\Image\Normal\52.png",
                   r"E:\MyFastAI_Project_E\Image\Normal\53.png"],
        "Yellow": [r"E:\MyFastAI_Project_E\Image\Yellow\470467721_122113376150620788_7483223442733841889_n.jpg", 
                   r"E:\MyFastAI_Project_E\Image\Yellow\480450326_1125657082688389_5418859568059391331_n.jpg", r"E:\MyFastAI_Project_E\Image\Yellow\481999682_1136825754904855_5806230666139878824_n.jpg"]
    }
    select = ex_img[class_poo]
    image_choice = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢", [f"Image {i+1}" for i in range(len(select))])
    img_index = int(image_choice.split()[1]) - 1
        
    img_path = select[img_index]
    st.image(img_path, caption=f"‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", use_container_width=True)
    process_and_start_chat(img_path, key_suffix="test")
    
#‡πÅ‡∏ä‡∏ó‡πÄ‡∏à‡∏ô‡∏Ñ‡∏≥
if "messages" in st.session_state and api_key_configured:
    st.subheader("‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö AI")
    for msg in st.session_state.messages:
        with st.chat_message(msg["role"]):
            st.markdown(msg["parts"][0])
    
    if prompt := st.chat_input("‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ô‡∏µ‡πâ..."):
        st.session_state.messages.append({"role": "user", "parts": [prompt]})
        with st.chat_message("user"):
            st.markdown(prompt)
        with st.chat_message("model"):
            with st.spinner("AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î..."):
                response = st.session_state.chat.send_message(prompt)
                response_text = response.text
                st.markdown(response_text)
        st.session_state.messages.append({"role": "model", "parts": [response_text]})

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢ (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
st.subheader("", divider=True)
st.caption(":blue[Ai Builder Season 5]")
st.caption(":red[Passawut Chutiparcharkij | IG : passawut_727]")