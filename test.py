import streamlit as st
from fastai.vision.all import *
from pathlib import Path
import pathlib # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PosixPath patch
import sys
from PIL import Image
import pandas as pd
import plotly.express as px
import requests # ‡πÄ‡∏û‡∏¥‡πà‡∏° requests ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
import os # ‡πÄ‡∏û‡∏¥‡πà‡∏° os ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå/‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)

# --- Monkey patch ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PosixPath ‡∏ö‡∏ô Windows ---
# (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ô Streamlit Cloud ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô Linux ‡πÅ‡∏ï‡πà‡πÉ‡∏™‡πà‡πÑ‡∏ß‡πâ‡∏Å‡πá‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢)
_original_posix_path = None 
if sys.platform == "win32": # Patch ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡∏ö‡∏ô Windows (‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á Local ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
    if hasattr(pathlib, 'PosixPath') and not isinstance(pathlib.PosixPath, pathlib.WindowsPath):
        _original_posix_path = pathlib.PosixPath
        pathlib.PosixPath = pathlib.WindowsPath
        # print("INFO: PosixPath patch applied.") # ‡πÄ‡∏≠‡∏≤ print ‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ deploy ‡∏à‡∏£‡∏¥‡∏á
# --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î Patch ---

# --- !!! ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà !!! ---
MODEL_FILENAME = "convnextv2_thev1_best_for_good.pkl" # <--- ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• .pkl ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
# !!! ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤ DIRECT DOWNLOAD LINK ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå .pkl ‡∏à‡∏≤‡∏Å Cloud Storage ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ !!!
MODEL_DOWNLOAD_URL = "YOUR_DIRECT_DOWNLOAD_LINK_TO_THE_MODEL_PKL_FILE_HERE"  # <--- ***** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL ‡∏ô‡∏µ‡πâ *****
# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á URL (‡∏™‡∏°‡∏°‡∏ï‡∏¥) ‡∏à‡∏≤‡∏Å Dropbox: "https://www.dropbox.com/s/xxxxxxxxx/your_model.pkl?dl=1"
# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á URL (‡∏™‡∏°‡∏°‡∏ï‡∏¥) ‡∏à‡∏≤‡∏Å GitHub Release asset: "https://github.com/YourUser/YourRepo/releases/download/v1.0/your_model.pkl"

MODEL_LOCAL_PATH = Path(MODEL_FILENAME) # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏ô container ‡∏Ç‡∏≠‡∏á Streamlit
# --------------------------------------------------------------------

@st.cache_resource # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
def download_and_load_model(model_url, local_path, filename):
    # 1. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á (container ‡∏Ç‡∏≠‡∏á Streamlit Cloud)
    if not local_path.is_file():
        st.info(f"Model file '{filename}' not found locally. Attempting to download from URL...")
        if model_url == "YOUR_DIRECT_DOWNLOAD_LINK_TO_THE_MODEL_PKL_FILE_HERE" or not model_url:
            st.error("Model download URL is not configured. Please set MODEL_DOWNLOAD_URL in the script.")
            return None
        try:
            with st.spinner(f"Downloading {filename}... (This may take a moment for large files)"):
                response = requests.get(model_url, stream=True)
                response.raise_for_status() # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ request ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏∞ raise error)
                
                with open(local_path, "wb") as f:
                    for chunk in response.iter_content(chunk_size=8192*16): # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô
                        if chunk: # filter out keep-alive new chunks
                            f.write(chunk)
                print(f"Model downloaded to {local_path}")
                st.success(f"Model '{filename}' downloaded successfully!")
        except Exception as e:
            st.error(f"Error downloading model: {e}")
            if os.path.exists(local_path): # ‡∏ñ‡πâ‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏ó‡∏¥‡πâ‡∏á
                os.remove(local_path)
            return None # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None ‡∏ñ‡πâ‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    else:
        print(f"Model file '{filename}' found locally at {local_path}.")
    
    # 2. ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
    if local_path.is_file(): # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        print(f"Attempting to load model from: {local_path}")
        try:
            learn = load_learner(local_path)
            print("Model loaded successfully!")
            return learn # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ learner object ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
        except Exception as e:
            st.error(f"Error loading model from {local_path}: {e}")
            # ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ debug
            st.info("Ensure the model file is a valid FastAI learner export (.pkl) and all necessary dependencies "
                    "(like 'timm', 'cloudpickle', 'fasttransform' if used by your model) "
                    "are listed in your requirements.txt file.")
            return None # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    return None # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
# ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (learner object ‡∏´‡∏£‡∏∑‡∏≠ None) ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ learn
learn = download_and_load_model(MODEL_DOWNLOAD_URL, MODEL_LOCAL_PATH, MODEL_FILENAME)

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤ Streamlit App (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
st.title("üí© Poop Classification")

if learn is None: # ‡∏ñ‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (learn ‡πÄ‡∏õ‡πá‡∏ô None)
    st.error("Critical Error: AI Model could not be loaded. The application cannot continue.")
    st.warning("Please check the deployment logs on Streamlit Cloud for more details, or contact the app administrator.")
    st.stop() # ‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á script ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á UI ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡πà‡∏≠

st.subheader("Upload your Poop Image")
uploaded_file = st.file_uploader(
    "Click This For Upload Image", 
    type=["jpg", "jpeg", "png"], 
    help="Limit 200MB per file"
)

if uploaded_file is not None:
    image_to_display = Image.open(uploaded_file)
    
    col1, col2 = st.columns([2, 3])

    with col1:
        st.markdown("##### This is your Image")
        st.image(image_to_display, use_column_width=True)

        if st.button("üöΩ Click For Predict", use_container_width=True):
            with st.spinner("Predicting..."):
                img_bytes = uploaded_file.getvalue()
                try:
                    pil_image = PILImage.create(img_bytes)
                except Exception as e_pil:
                    st.error(f"Error converting uploaded file to an image: {e_pil}")
                    if 'prediction_made' in st.session_state: del st.session_state.prediction_made 
                    st.stop()
                
                try:
                    pred_class, pred_idx, probs = learn.predict(pil_image) 
                    st.markdown("---")
                    st.markdown(f"#### Result is : **{pred_class}**")
                    st.markdown(f"##### {pred_class} : **{probs[pred_idx]:.1%}**")
                
                    st.session_state.prediction_made = True
                    st.session_state.predicted_class = pred_class
                    st.session_state.probabilities = probs.numpy() 
                    st.session_state.class_names = list(learn.dls.vocab)
                except Exception as e_predict:
                    st.error(f"Error during prediction: {e_predict}")
                    if 'prediction_made' in st.session_state: del st.session_state.prediction_made
    
    if 'prediction_made' in st.session_state and st.session_state.prediction_made:
        with col2:
            st.markdown("<br>", unsafe_allow_html=True)
            st.markdown("##### Probabilities Chart")
            
            df_probs = pd.DataFrame({
                'Class': st.session_state.class_names,
                'Probability': st.session_state.probabilities * 100
            })
            
            fig = px.pie(df_probs, values='Probability', names='Class', 
                         color_discrete_sequence=px.colors.qualitative.Set3)
            fig.update_traces(textposition='inside', textinfo='percent+label', hoverinfo='label+percent+name')
            fig.update_layout(showlegend=True, legend_title_text='Classes')
            
            st.plotly_chart(fig, use_container_width=True)

st.markdown("---")
st.caption("App by Chokun7788 (with AI assistant)")